import numpy as np
an_array = np.array([3, 33, 333])
print(type(an_array))
print()
print(an_array.shape)
print()
print(an_array[0], an_array[1], an_array[2])
an_array[0]=888
print()
print(an_array)
another = np.array([[11,12,13],[21,22,23]])
print(another)
print()
print("The shape is 2 rows, 3 columns: ", another.shape)
print()
print("Accessing elements [0,0], [0,1], and [1,0] of the ndarray: ", another[0, 0], ", ",another[0, 1],", ", another[1, 0])
ex1 = np.zeros((2,2))      
print(ex1)
print()
ex2 = np.full((2,2), 9.0)  
print(ex2)
print()
ex3 = np.eye(2,2)
print(ex3)
print()
ex4 = np.ones((1,2))
print(ex4)
print()
print(ex4.shape)
print()
print(ex4[0,1])
ex5 = np.random.random((2,2))
print()
print(ex5)
an_array = np.array([[11,12,13,14], [21,22,23,24], [31,32,33,34]])
print(an_array)
a_slice = an_array[:2, 1:3]
print()
print(a_slice)
print("Before:", an_array[0, 1])
a_slice[0, 0] = 1000
print("After:", an_array[0, 1])
an_array = np.array([[11,12,13,14], [21,22,23,24], [31,32,33,34]])
print()
print(an_array)
row_rank1 = an_array[1, :]
print()
print(row_rank1, row_rank1.shape)
row_rank2 = an_array[1:2, :]
print(row_rank2, row_rank2.shape)
print()
col_rank1 = an_array[:, 1]
col_rank2 = an_array[:, 1:2]
print(col_rank1, col_rank1.shape)
print()
print(col_rank2, col_rank2.shape)
print()
an_array = np.array([[11,12,13], [21,22,23], [31,32,33], [41,42,43]])
print('Original Array:')
print(an_array)
col_indices = np.array([0, 1, 2, 0])
print()
print('\nCol indices picked : ', col_indices)
row_indices = np.arange(4)
print()
print('\nRows indices picked : ', row_indices)
for row,col in zip(row_indices,col_indices):
    print(row, ", ",col)
print()
print('Values in the array at those indices: ',an_array[row_indices, col_indices])
an_array[row_indices, col_indices] += 100000
print()
print('\nChanged Array:')
print(an_array)
print()
an_array = np.array([[11,12], [21, 22], [31, 32]])
print(an_array)
filter = (an_array > 15)
print()
print(an_array[filter])
print()
an_array[(an_array % 2 == 0)]
print()
an_array[an_array % 2 == 0] +=100
print(an_array)
ex1 = np.array([11, 12])
print(ex1.dtype)
print()
ex2 = np.array([11.0, 12.0])
print(ex2.dtype)
print()
ex3 = np.array([11, 21], dtype=np.int64)
print(ex3.dtype)
print()
ex4 = np.array([11.1,12.7], dtype=np.int64)
print(ex4.dtype)
print()
print(ex4)
print()
ex5 = np.array([11, 21], dtype=np.float64)
print(ex5.dtype)
print()
print(ex5)
print()
x = np.array([[111,112],[121,122]], dtype=np.int)
y = np.array([[211.1,212.1],[221.1,222.1]], dtype=np.float64)
print(x)
print()
print(y)
print(x + y)
print()
print("Addition:\n",np.add(x, y))
print()
print(x - y)
print()
print("Subraction:\n",np.subtract(x, y))
print()
print(x * y)
print()
print("Multiplication:\n",np.multiply(x, y))
print()
print(x / y)
print()
print("Division:\n",np.divide(x, y))
print()
print(np.sqrt(x))
print()
print(np.exp(x))
print()
arr = 10 * np.random.randn(2,5)
print(arr)
print()
print(arr.mean())
print()
print(arr.mean(axis = 1))
print()
print(arr.mean(axis = 0))
print()
print(arr.sum())
print()
print(np.median(arr, axis = 1))
print()
unsorted = np.random.randn(10)
print(unsorted)
print()
sorted = np.array(unsorted)
sorted.sort()
print(sorted)
print()
print(unsorted)
print()
unsorted.sort() 
print(unsorted)
array = np.array([1,2,1,4,2,1,4,2])
print(np.unique(array))
s1=np.array(['chair','desk','bulb'])
s2=np.array(['lamp','bulb','chair'])
print(s1,s2)
print()
print(np.intersect1d(s1,s2))
print()
print(np.union1d(s1, s2))
print()
print(np.setdiff1d(s1, s2))
print()
print(np.in1d(s1, s2))
print()
start = np.zeros((4,3))
print(start)
print()
add_rows = np.array([1, 0, 2])
print(add_rows)
print()
y = start + add_rows
print(y)
print()
add_cols = np.array([[0,1,2,3]])
add_cols = add_cols.T
print(add_cols)
print()
y = start + add_cols 
print(y)
print()
add_scalar = np.array([1])  
print(start+add_scalar)
print()
arrA = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])
print(arrA)
print()
arrB = [0,1,0,2]
print(arrB)
print()
print(arrA + arrB)
